services:
  nginx:
    container_name: 'nginx'
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    networks:
      django_net:
        ipv4_address: 172.38.10.10
    tty: true
    ports:
      - 8080:80
      - 443:443
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    volumes:
      - ./django/public/:/public/
    depends_on:
      - django

  redis:
    container_name: 'redis'
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    #restart: always
    tty: true
    networks:
      redis_net:
        ipv4_address: 172.38.30.30
    ports:
      - 6379:6379
      - 6380:6380
    environment:
      - REDIS_PASSOWRD=$REDIS_PASSOWRD
    command: /bin/sh -c '
      cp /etc/redis/redis.conf0 /etc/redis/redis.conf &&
      echo requirepass $REDIS_PASSOWRD >> /etc/redis/redis.conf &&
      redis-server /etc/redis/redis.conf'

  django:
    container_name: 'django'
    build:
      context: ./docker/django
      dockerfile: Dockerfile
    networks:
      - django_net
      - db_net
      - eth_net
      - redis_net
    tty: true
    volumes:
      - ./django/:/workspace
      - ./eth:/workspace/eth
    ports:
      - 3000:3000
      - 8000:8000
      - 8001:8001
    environment:
      - DJANGO_SECRET_KEY=$DJANGO_SECRET_KEY
      - POSTGRES_DJANGO_USER=$POSTGRES_DJANGO_USER
      - POSTGRES_DJANGO_PASSWORD=$POSTGRES_DJANGO_PASSWORD
      - POSTGRES_DJANGO_DB_NAME=$POSTGRES_DJANGO_DB_NAME
      - OAUTH_CLIENT_ID=$OAUTH_CLIENT_ID
      - OAUTH_SECRET_ID=$OAUTH_SECRET_ID
      - TWILIO_SERVICE_SID=$TWILIO_SERVICE_SID
      - TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID
      - TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN
      - BREVO_API_KEY=$BREVO_API_KEY
      - BREVO_SENDER_ADDRESS=$BREVO_SENDER_ADDRESS
      - REDIS_PASSOWRD=$REDIS_PASSOWRD
    command: /bin/sh -c '
      cp /tmp/make_db_setting.sh ./backend/make_db_setting.sh &&
      sh ./backend/make_db_setting.sh &&
      cd backend &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py loaddata ./**/fixtures/initial_data.json &&
      (celery -A ft_trans  worker -B -l info )&
      (cd frontend && npm install && npm run build) &&
      cd backend && daphne -e  ssl:8000:privateKey=/tmp/server.key:certKey=/tmp/server.crt ft_trans.asgi:application
      '

  eth:
    container_name: 'eth'
    build:
      context: .
      dockerfile: ./docker/eth/Dockerfile
    networks:
      - eth_net
    tty: true
    volumes:
      - ./eth:/workspace/eth
    expose:
      - '8545'

networks:
  django_net:
    name: django_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.38.10.0/24
  db_net:
    name: db_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.38.20.0/24
  redis_net:
    name: redis_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.38.30.0/24
  eth_net:
    name: eth_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.38.30.0/24
